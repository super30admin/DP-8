//TimeComplexity.    O(n*n)
//SpaceComplexity.   O(1)


class Solution {
    public int numberOfArithmeticSlices(int[] nums) {
      
                 int count = 0;   
  
        
        for(int i = 0 ; i  < nums.length-2; i++){
              int diff = nums[i+1] - nums[i];
          for(int j = i+2; j < nums.length; j++){
              if(nums[j] - nums[j-1] == diff){
                  count++;
              }else{
                  break;
              }
          }
        }

        return count;
    }
}


//TimeComplexity   O(n)
//Spacecomplexity  O(n)

class Solution {
    public int numberOfArithmeticSlices(int[] nums) {
      
        int sum = 0;   
        int n = nums.length;
        int[] dp = new int[n];
        
        for(int i = n-3 ; i >= 0; i--){
              
          if(nums[i] - nums[i+1] == nums[i+1]- nums[i+2]){
              dp[i] = dp[i+1]+1;
          }
            sum += dp[i];
        }

        return sum;
    }
}

//TimeComplexity.   O(n)
//SpaceComplexity.  O(1)


class Solution {
    public int numberOfArithmeticSlices(int[] nums) {
      
        int sum = 0;   
        int n = nums.length;
        int prev = 0;
        int curr = 0;
        
        for(int i = n-3 ; i >= 0; i--){
              
          if(nums[i] - nums[i+1] == nums[i+1]- nums[i+2]){
            curr = prev+1;
          }else{
              curr = 0;
          }
            prev = curr;
            sum += curr;;
        }

        return sum;
    }
}
