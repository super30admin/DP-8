class Solution:
    
    def fun(self, i, j, triangle, dp):
        if(i == len(triangle)):
            return 0;
        if(dp[i][j] != float('inf')):
            return dp[i][j]
        
        path1 =  triangle[i][j] + self.fun(i+1, j, triangle, dp);
        path2 =  triangle[i][j] + self.fun(i+1, j + 1, triangle, dp);
        dp[i][j] = min(path1, path2);
        return min(path1, path2)
        
    
    def minimumTotal(self, triangle: List[List[int]]) -> int:
        n = len(triangle)
        dp = [[float('inf')]*len(triangle[i]) for i in range(n)]
        return self.fun(0, 0, triangle, dp);
        
        
        
        
