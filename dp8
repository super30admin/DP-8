Arithmetic Slices
#tc: O(n)
#sc: O(1)
class Solution:
    def numberOfArithmeticSlices(self, nums: List[int]) -> int:
		#n is the number of times same differences occur between values
        #ans += n if diffs between nums[i] and num[i - 1] are the same a second time
        ans = n = 0
        if len(nums) > 2:
            prevDiff = nums[1] - nums[0]
            for i in range(2, len(nums)):
                curDiff = nums[i] - nums[i - 1]
                if curDiff == prevDiff:
                    n += 1
                    ans += n
                else:
                    n = 0
                prevDiff = curDiff
        
        return ans
Triangle
#tc: O(n^2)
#sc: O(1)
class Solution:
    def minimumTotal(self, triangle: List[List[int]]) -> int:
        for i in range(len(triangle)-2, -1, -1):  # for each row in triangle (skipping the last),
            for j in range(i+1):                  # loop through each element in the row
                triangle[i][j] += min(triangle[i+1][j],    # minimum sum from coordinate (x+1, y)
                                      triangle[i+1][j+1])  # minimum sum from coordinate (x+1, y+1)
        return triangle[0][0]
